var documenterSearchIndex = {"docs":
[{"location":"#Skewlia.jl","page":"Skewlia.jl","title":"Skewlia.jl","text":"","category":"section"},{"location":"","page":"Skewlia.jl","title":"Skewlia.jl","text":"Documentation for Skewlia.jl","category":"page"},{"location":"","page":"Skewlia.jl","title":"Skewlia.jl","text":"Modules = [Skewlia]\nOrder   = [:module, :type, :function]","category":"page"},{"location":"#Skewlia.Skewlia","page":"Skewlia.jl","title":"Skewlia.Skewlia","text":"Skewlia - mergable priority queues\n\n    heap = Skewlia.SkewHeap()\n\n    # Insert one at a time\n    for job in some_list_of_jobs\n        Skewlia.put!(heap, job)\n    end\n\n    # Insert all at once\n    Skewlia.put!(heap, some_list_of_jobs...)\n\n    # Retrieve jobs in order (using <=)\n    while !Skewlia.is_empty(heap)\n        job = Skewlia.get!(heap)\n        do_stuff_with(job)\n    end\n\n    # Or as an iterator\n    for job in heap\n        do-stuff_with(job)\n    end\n\n\n\n\n\n","category":"module"},{"location":"#Skewlia.SkewHeap","page":"Skewlia.jl","title":"Skewlia.SkewHeap","text":"SkewHeap() ::SkewHeap\n\nInitialize a new skew heap. Elements inserted into the heap will be ordered using <=.\n\n\n\n\n\n","category":"type"},{"location":"#Base.iterate","page":"Skewlia.jl","title":"Base.iterate","text":"iterate(h::SkewHeap)\n\nReturns an iterator that will sequentially retrieve each item from the heap. Adding new items while iterating over the heap is perfectly acceptable.\n\nheap = Skewlia.SkewHeap()\n\nSkewlia.put!(\"foo\", \"bar\", \"baz\", \"bat\")\n\nfor abused_string in heap\n    println(abused_string)\nend\n\n\n\n\n\n","category":"function"},{"location":"#Skewlia.explain-Tuple{Skewlia.SkewNode,Any}","page":"Skewlia.jl","title":"Skewlia.explain","text":"explain(h::SkewHeap)\n\nPrints out the structure of the heap for debugging.\n\n\n\n\n\n","category":"method"},{"location":"#Skewlia.is_empty-Tuple{Skewlia.SkewHeap}","page":"Skewlia.jl","title":"Skewlia.is_empty","text":"is_empty(h::SkewHeap)\n\nReturns true if the heap is empty.\n\n\n\n\n\n","category":"method"},{"location":"#Skewlia.length-Tuple{Skewlia.SkewHeap}","page":"Skewlia.jl","title":"Skewlia.length","text":"length(h::SkewHeap)\n\nReturns the number of items in the heap.\n\n\n\n\n\n","category":"method"},{"location":"#Skewlia.peek-Tuple{Skewlia.SkewHeap}","page":"Skewlia.jl","title":"Skewlia.peek","text":"peek(h::SkewHeap)\n\nReturns the next item from the heap without removing it, or nothing if empty.\n\n\n\n\n\n","category":"method"},{"location":"#Skewlia.put!-Tuple{Skewlia.SkewHeap,Vararg{Any,N} where N}","page":"Skewlia.jl","title":"Skewlia.put!","text":"put(h::SkewHeap, items...)\n\nInserts new items into the heap and returns the heap's new size.\n\n\n\n\n\n","category":"method"},{"location":"#Skewlia.take!-Tuple{Skewlia.SkewHeap}","page":"Skewlia.jl","title":"Skewlia.take!","text":"take(h::SkewHeap)\n\nRemoves and returns the next item from the heap or nothing if it is empty.\n\n\n\n\n\n","category":"method"}]
}
